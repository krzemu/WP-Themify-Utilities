class FixedFooter { constructor({ mainFooter: e, backdropFooter: t }) { this.footerDOM = { mainFooter: e, backdropFooter: t }, this.status = { footerScrollMax: !1, footerInView: !1 }, this.setUpFooters(), this.scrollEvent() } setUpFooters() { let { mainFooter: e, backdropFooter: t } = this.footerDOM; t.style.height = `${e.clientHeight}px`, e.style.position = "fixed", e.style.bottom = "0", e.style.zIndex = "-10", window.scrollY > document.documentElement.scrollHeight - window.innerHeight - e.clientHeight ? this.maxHeightReachHandler() : this.getBackFromView() } scrollEvent() { window.addEventListener("scroll", e => this.scrollHander(e)) } scrollHander(e) { let { footerDOM: t, status: o } = this, i = window.scrollY; !0 !== o.footerInView && i >= document.documentElement.scrollHeight - window.innerHeight - t.mainFooter.clientHeight && this.reachingFooterHandler(), i >= document.documentElement.scrollHeight - window.innerHeight && this.maxHeightReachHandler(), !0 === o.footerScrollMax && i < document.documentElement.scrollHeight - window.innerHeight - this.footerDOM.mainFooter.clientHeight && this.getBackFromView(), !0 === o.footerInView && i < document.documentElement.scrollHeight - window.innerHeight - this.footerDOM.mainFooter.clientHeight && this.getBackFromView() } reachingFooterHandler() { let { status: e, footerDOM: t } = this; e.footerInView = !0, t.mainFooter.style.visibility = "visible" } maxHeightReachHandler() { let { status: e, footerDOM: t } = this; t.mainFooter.style.position = "absolute", t.mainFooter.style.zIndex = "1", e.footerScrollMax = !0 } getBackFromView() { let { status: e, footerDOM: t } = this; t.mainFooter.style.position = "fixed", t.mainFooter.style.zIndex = "-100", e.footerScrollMax = !1, e.footerInView = !1, t.mainFooter.style.visibility = "hidden" } }
const fixedFooter = new FixedFooter({ mainFooter: document.querySelector(".footer-lt__main"), backdropFooter: document.querySelector(".footer-lt__backdrop") });